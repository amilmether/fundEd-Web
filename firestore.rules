/**
 * @fileoverview Firestore Security Rules for FundEd platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It enforces a strict user-ownership model for user profiles and restricts
 * access to class-specific data based on user roles (admin, rep, student).
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the
 *   user themselves (owner).
 * - /classes/{classId}: Stores class information. Access is controlled based
 *   on user roles and class representation.
 * - /classes/{classId}/events/{eventId}: Stores event details for a specific
 *   class. Access is restricted to authorized class members (rep, admins).
 * - /classes/{classId}/payments/{paymentId}: Stores payment information for a
 *   specific class. Access is restricted to authorized class members (rep, admins).
 * - /classes/{classId}/students/{studentId}: Stores student information for a specific
 *   class. Access is restricted to authorized class members (rep, admins).
 * - /classes/{classId}/qrcodes/{qrCodeId}: Stores QR code information for a specific
 *   class. Access is restricted to authorized class members (rep, admins).
 * - /classes/{classId}/print_distributions/{distributionId}: Stores print distribution records for a class. Access is restricted to authorized class members (rep, admins).
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized data access.
 * - Data validation is minimized during prototyping to allow for rapid
 *   iteration, focusing on authorization and relational integrity.
 * - Authorization is done by checking the classId of the user against the classId in the path.
 *
 * Denormalization for Authorization:
 * - The ruleset assumes that any information required for authorization
 *   is readily available within the document or can be efficiently checked
 *   using the request context.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) User with ID 'olaVUpyqgHcYyCAHcr0scWDty0Z2' can create a profile at /users/olaVUpyqgHcYyCAHcr0scWDty0Z2.
     * @allow (get, update, delete) User with ID 'olaVUpyqgHcYyCAHcr0scWDty0Z2' can access /users/olaVUpyqgHcYyCAHcr0scWDty0Z2.
     * @deny (get, update, delete) User with ID 'otherUserId' cannot access /users/olaVUpyqgHcYyCAHcr0scWDty0Z2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures class data, allowing access to authorized class members (rep, admins).
     * @path /classes/{classId}
     * @allow (get, list) Any authenticated user can read class data.
     * @allow (create) Only admins can create classes.
     * @allow (update, delete) Only the class rep or admins can modify class data.
     * @deny (update, delete) A regular user (student) cannot modify class data.
     * @principle Restricts write access based on user roles and class representation.
     */
    match /classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if false; // TODO: Add admin check if roles are implemented.
      allow update: if false; // TODO: Add admin/rep check based on denormalized data.
      allow delete: if false; // TODO: Add admin/rep check based on denormalized data.
    }

    /**
     * @description Secures event data for a specific class.
     * @path /classes/{classId}/events/{eventId}
     * @allow (get, list) Any authenticated user can read event data for a class.
     * @allow (create) Only the class rep or admins can create events.
     * @allow (update, delete) Only the class rep or admins can modify event data.
     * @deny (create, update, delete) A regular user (student) cannot create or modify event data.
     * @principle Restricts access based on user roles and class representation.
     */
    match /classes/{classId}/events/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if false; // TODO: Add admin/rep check based on denormalized data.
      allow update: if false; // TODO: Add admin/rep check based on denormalized data.
      allow delete: if false; // TODO: Add admin/rep check based on denormalized data.
    }

    /**
     * @description Secures payment data for a specific class.
     * @path /classes/{classId}/payments/{paymentId}
     * @allow (get, list) Any authenticated user can read payment data for a class.
     * @allow (create) Only the class rep or admins can create payment records.
     * @allow (update, delete) Only the class rep or admins can modify payment records.
     * @deny (create, update, delete) A regular user (student) cannot create or modify payment records.
     * @principle Restricts access based on user roles and class representation.
     */
    match /classes/{classId}/payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      //The reported error was happening here.
      allow get, list: if isSignedIn();
      allow create: if false; // TODO: Add admin/rep check based on denormalized data.
      allow update: if false; // TODO: Add admin/rep check based on denormalized data.
      allow delete: if false; // TODO: Add admin/rep check based on denormalized data.
    }

    /**
     * @description Secures student data for a specific class.
     * @path /classes/{classId}/students/{studentId}
     * @allow (get, list) Any authenticated user can read student data for a class.
     * @allow (create) Only the class rep or admins can create student records.
     * @allow (update, delete) Only the class rep or admins can modify student records.
     * @deny (create, update, delete) A regular user (student) cannot create or modify student records.
     */
    match /classes/{classId}/students/{studentId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if false; // TODO: Add admin/rep check based on denormalized data.
        allow update: if false; // TODO: Add admin/rep check based on denormalized data.
        allow delete: if false; // TODO: Add admin/rep check based on denormalized data.
    }

    /**
     * @description Secures QR code data for a specific class.
     * @path /classes/{classId}/qrcodes/{qrCodeId}
     * @allow (get, list) Any authenticated user can read QR code data for a class.
     * @allow (create) Only the class rep or admins can create QR code records.
     * @allow (update, delete) Only the class rep or admins can modify QR code records.
     * @deny (create, update, delete) A regular user (student) cannot create or modify QR code records.
     */
    match /classes/{classId}/qrcodes/{qrCodeId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if false; // TODO: Add admin/rep check based on denormalized data.
        allow update: if false; // TODO: Add admin/rep check based on denormalized data.
        allow delete: if false; // TODO: Add admin/rep check based on denormalized data.
    }

    /**
     * @description Secures print distribution data for a specific class.
     * @path /classes/{classId}/print_distributions/{distributionId}
     * @allow (get, list) Any authenticated user can read print distribution data for a class.
     * @allow (create) Only the class rep or admins can create print distribution records.
     * @allow (update, delete) Only the class rep or admins can modify print distribution records.
     * @deny (create, update, delete) A regular user (student) cannot create or modify print distribution records.
     */
    match /classes/{classId}/print_distributions/{distributionId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if false; // TODO: Add admin/rep check based on denormalized data.
        allow update: if false; // TODO: Add admin/rep check based on denormalized data.
        allow delete: if false; // TODO: Add admin/rep check based on denormalized data.
    }
  }
}